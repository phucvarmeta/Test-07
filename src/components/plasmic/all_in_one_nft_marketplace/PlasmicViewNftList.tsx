// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5vAoK7BmKbFSGEzykGZNyw
// Component: 3VJV-XWYNb0Z

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: Yvyy45WNSjzG/component
import { AntdTabs } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdTabItem } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Input } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as Input_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { Divider } from "@chakra-ui/react";
import { Menu } from "@plasmicpkgs/antd/skinny/registerMenu";
import { SubMenu } from "@plasmicpkgs/antd/skinny/registerMenu";
import { MenuItem } from "@plasmicpkgs/antd/skinny/registerMenu";
import { Checkbox } from "@plasmicpkgs/antd/skinny/registerCheckbox";
import { checkboxHelpers as Checkbox_Helpers } from "@plasmicpkgs/antd/skinny/registerCheckbox";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { TableContainer } from "@chakra-ui/react";
import { Table } from "@chakra-ui/react";
import { Thead } from "@chakra-ui/react";
import { Tr } from "@chakra-ui/react";
import { Th } from "@chakra-ui/react";
import { Td } from "@chakra-ui/react";
import DropIcon from "../../DropIcon"; // plasmic-import: 4c5D6NKeWJoi/component
import { Tbody } from "@chakra-ui/react";
import Footer from "../../Footer"; // plasmic-import: DetsMIlX5icM/component

import { useScreenVariants as useScreenVariantswy4R3RlEmIpX } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: WY4r3RlEMIpX/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: 66MC2d9B7YecVEphuUMtqF/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5vAoK7BmKbFSGEzykGZNyw/projectcss
import sty from "./PlasmicViewNftList.module.css"; // plasmic-import: 3VJV-XWYNb0Z/css

import FilterFunnel02SvgIcon from "./icons/PlasmicIcon__FilterFunnel02Svg"; // plasmic-import: qHa8eF_2_9tU/icon
import LeftAngleSvgIcon from "./icons/PlasmicIcon__LeftAngleSvg"; // plasmic-import: JBHL5Exv0umT/icon
import MagnifyingGlassSvgIcon from "./icons/PlasmicIcon__MagnifyingGlassSvg"; // plasmic-import: HU0kS2cfewLt/icon
import CloseSquareSvgIcon from "./icons/PlasmicIcon__CloseSquareSvg"; // plasmic-import: hGtrlnCMII75/icon

createPlasmicElementProxy;

export type PlasmicViewNftList__VariantMembers = {};
export type PlasmicViewNftList__VariantsArgs = {};
type VariantPropType = keyof PlasmicViewNftList__VariantsArgs;
export const PlasmicViewNftList__VariantProps = new Array<VariantPropType>();

export type PlasmicViewNftList__ArgsType = {};
type ArgPropType = keyof PlasmicViewNftList__ArgsType;
export const PlasmicViewNftList__ArgProps = new Array<ArgPropType>();

export type PlasmicViewNftList__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  tabs?: Flex__<typeof AntdTabs>;
  searchNftName?: Flex__<typeof Input>;
  sortNftItems?: Flex__<typeof AntdSelect>;
  minPrice?: Flex__<typeof AntdInputNumber>;
  maxPrice?: Flex__<typeof AntdInputNumber>;
  chakraUiDivider?: Flex__<typeof Divider>;
  traitsMenu?: Flex__<typeof Menu>;
  searchBackground?: Flex__<typeof Input>;
  antdCheckbox7?: Flex__<typeof Checkbox>;
  antdCheckbox6?: Flex__<typeof Checkbox>;
  antdCheckbox3?: Flex__<typeof Checkbox>;
  antdCheckbox4?: Flex__<typeof Checkbox>;
  antdCheckbox5?: Flex__<typeof Checkbox>;
  buyNftModal?: Flex__<typeof AntdModal>;
  unlistModal?: Flex__<typeof AntdModal>;
  searchActivityNftName?: Flex__<typeof Input>;
  sortNftActivities?: Flex__<typeof AntdSelect>;
  chakraUiTableContainer?: Flex__<typeof TableContainer>;
  chakraUiTable?: Flex__<typeof Table>;
  chakraUiThead?: Flex__<typeof Thead>;
  chakraUiTbody?: Flex__<typeof Tbody>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultViewNftListProps {
  className?: string;
}

const $$ = {};

function PlasmicViewNftList__RenderFunc(props: {
  variants: PlasmicViewNftList__VariantsArgs;
  args: PlasmicViewNftList__ArgsType;
  overrides: PlasmicViewNftList__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "tabs.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "searchNftName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "sortNftItems.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "priceLowHigh"
      },
      {
        path: "minPrice.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "maxPrice.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "traitsMenu.openKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "searchBackground.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "antdCheckbox7.value",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Checkbox_Helpers)
      },
      {
        path: "antdCheckbox6.value",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Checkbox_Helpers)
      },
      {
        path: "antdCheckbox3.value",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Checkbox_Helpers)
      },
      {
        path: "antdCheckbox4.value",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Checkbox_Helpers)
      },
      {
        path: "antdCheckbox5.value",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Checkbox_Helpers)
      },
      {
        path: "searchActivityNftName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "sortNftActivities.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "priceLowHigh"
      },
      {
        path: "openFilter",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "nftList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            id: "1149",
            network: "testnet",
            version: "389959602",
            nftId:
              "0xf3e7313b894b6523cb2546aa4168976a3273651fe53752e79138a4a8c93414b0",
            name: "Suinova: suinova #113",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/0ebzB8okTbW6EO1Hcv4Ul0SeK3BIVBtWCJi5CghtJoI",
            ownerAddress: "",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618094145",
            fields: null,
            createdAt: "2025-04-16T23:05:55.264Z",
            updatedAt: "2025-04-21T17:00:15.264Z"
          },
          {
            id: "1148",
            network: "testnet",
            version: "389960771",
            nftId:
              "0xedceb0877664d1bfef0d69191a48e88116cf7916e142de429f4149ecfefee8d2",
            name: "Suinova: suinova #130",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/qMWIRfTw7eW77HdNqSlnrbpIR69KcIq2Zc5xjPtew3Y",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618187710",
            fields: null,
            createdAt: "2025-04-16T23:05:55.258Z",
            updatedAt: "2025-04-21T17:00:15.258Z"
          },
          {
            id: "1147",
            network: "testnet",
            version: "389959373",
            nftId:
              "0xec319cc9d7e761e30081f542ee7e9534bde60a0f183aec862c71761a0dd2121e",
            name: "Suinova: suinova #110",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/ysw7kTe2fV3TXtEsQOqedbwYCnQarv1FZBMeHMn6cKw",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618076375",
            fields: null,
            createdAt: "2025-04-16T23:05:55.253Z",
            updatedAt: "2025-04-21T17:00:15.253Z"
          },
          {
            id: "1146",
            network: "testnet",
            version: "389959464",
            nftId:
              "0xe709728193dc659af64fbb8e6f76a7343801b577834c30a99b8251af41014dea",
            name: "Suinova: suinova #111",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/wxk6OnYp9c7PL7QjeX-sUNzYt-VeSw0zixb88iaQXjA",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618083031",
            fields: null,
            createdAt: "2025-04-16T23:05:55.247Z",
            updatedAt: "2025-04-21T17:00:15.247Z"
          },
          {
            id: "1145",
            network: "testnet",
            version: "389960145",
            nftId:
              "0xe4c667a26d1972a81a442b08c65253be72d80ce99902d48d05615498659d0c87",
            name: "Suinova: suinova #121",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/WgUl3WoEN8aCcW8SERooybA3UY-8p4KPiNSXAvHmpsM",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618138321",
            fields: null,
            createdAt: "2025-04-16T23:05:55.242Z",
            updatedAt: "2025-04-21T17:00:15.242Z"
          },
          {
            id: "1144",
            network: "testnet",
            version: "389956529",
            nftId:
              "0xd94231185f3cd03b11d6f3e49034e83eca0c1788b39964c3190e08cf86e459b0",
            name: "Suinova: suinova #4",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/0ebzB8okTbW6EO1Hcv4Ul0SeK3BIVBtWCJi5CghtJoI",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744617853488",
            fields: null,
            createdAt: "2025-04-16T23:05:55.237Z",
            updatedAt: "2025-04-21T17:00:15.237Z"
          },
          {
            id: "1143",
            network: "testnet",
            version: "389945709",
            nftId:
              "0xd14d0eb91c8781510424618a4c2fb51ab03070181a1e458bea954bb3cc9675da",
            name: "Suinova: suinova",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744617003255",
            fields: null,
            createdAt: "2025-04-16T23:05:55.232Z",
            updatedAt: "2025-04-21T17:00:15.232Z"
          },
          {
            id: "1142",
            network: "testnet",
            version: "389958682",
            nftId:
              "0xcc218d790d31edddee0ebc5251bede507d5d0bb57b29a9d732da12e02513d23d",
            name: "Suinova: suinova #100",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/0ebzB8okTbW6EO1Hcv4Ul0SeK3BIVBtWCJi5CghtJoI",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618025608",
            fields: null,
            createdAt: "2025-04-16T23:05:55.226Z",
            updatedAt: "2025-04-21T17:00:15.225Z"
          },
          {
            id: "1141",
            network: "testnet",
            version: "389958771",
            nftId:
              "0xcb93ed5720fbae440ba38c8bee0dfda52a24d4e808644c89c28f22e713583d92",
            name: "Suinova: suinova #101",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/ysw7kTe2fV3TXtEsQOqedbwYCnQarv1FZBMeHMn6cKw",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618032284",
            fields: null,
            createdAt: "2025-04-16T23:05:54.870Z",
            updatedAt: "2025-04-21T17:00:12.118Z"
          },
          {
            id: "1140",
            network: "testnet",
            version: "389960964",
            nftId:
              "0xc6edd349d199584a0ea2abf082bd3f1cda38977daf6311a6dfc1d5976385bb73",
            name: "Suinova: suinova #133",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/ilwqBHFUDxJ_r_bk1SmJYZpTnMeDXWG8cg9JoyyKHYs",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618203171",
            fields: null,
            createdAt: "2025-04-16T23:05:54.864Z",
            updatedAt: "2025-04-21T17:00:12.113Z"
          },
          {
            id: "1139",
            network: "testnet",
            version: "389957707",
            nftId:
              "0xc658fa4d36e3b26353a8d0a88f1424872fa08231ddf76462f68b704a05b223a5",
            name: "Suinova: suinova #1",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/qMWIRfTw7eW77HdNqSlnrbpIR69KcIq2Zc5xjPtew3Y",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744617946664",
            fields: null,
            createdAt: "2025-04-16T23:05:54.859Z",
            updatedAt: "2025-04-21T17:00:12.108Z"
          },
          {
            id: "1138",
            network: "testnet",
            version: "389961135",
            nftId:
              "0xc1346345c5a7b93e8ecb943dd1e87de9ee5547faf82d6abfb1d2fc0b16a7af62",
            name: "Suinova: suinova #136",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/0ebzB8okTbW6EO1Hcv4Ul0SeK3BIVBtWCJi5CghtJoI",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618219275",
            fields: null,
            createdAt: "2025-04-16T23:05:54.848Z",
            updatedAt: "2025-04-21T17:00:12.102Z"
          },
          {
            id: "1137",
            network: "testnet",
            version: "389959283",
            nftId:
              "0xc0cb3976ccc09f784ce0a8e9bec3234210224bd370e132f00fc0bd217294003d",
            name: "Suinova: suinova #109",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/ilwqBHFUDxJ_r_bk1SmJYZpTnMeDXWG8cg9JoyyKHYs",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618069846",
            fields: null,
            createdAt: "2025-04-16T23:05:54.841Z",
            updatedAt: "2025-04-21T17:00:12.097Z"
          },
          {
            id: "1136",
            network: "testnet",
            version: "389960063",
            nftId:
              "0xbf188117be4dc141f69b57b03001b034af17aa1a2c501e2fca6b53814e59588d",
            name: "Suinova: suinova #120",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/WgUl3WoEN8aCcW8SERooybA3UY-8p4KPiNSXAvHmpsM",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618132167",
            fields: null,
            createdAt: "2025-04-16T23:05:54.835Z",
            updatedAt: "2025-04-21T17:00:12.091Z"
          },
          {
            id: "1135",
            network: "testnet",
            version: "389960349",
            nftId:
              "0xbeefcfa06e2d62fb8bb7b4b677fab5d24e79be1a2c7e2e53294c2e4e6ca93d3a",
            name: "Suinova: suinova #124",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/ilwqBHFUDxJ_r_bk1SmJYZpTnMeDXWG8cg9JoyyKHYs",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744618154127",
            fields: null,
            createdAt: "2025-04-16T23:05:54.828Z",
            updatedAt: "2025-04-21T17:00:12.085Z"
          },
          {
            id: "1134",
            network: "testnet",
            version: "389956475",
            nftId:
              "0xbc4e3d3a115d280b14dc6378228182262a0bf4daaf2edfd9aea81451f2088ab1",
            name: "Suinova: suinova #3",
            description: null,
            displayImageUrl: null,
            imageUrl:
              "https://walrus.tusky.io/6xG2gz-9DtFWRd--DmjC62uIxd9O3RfkTMftof9kHMQ",
            ownerAddress:
              "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
            ownerType: "ACCOUNT",
            collection: {
              id: "18",
              projectId: "hvw1kLkAUXN9hrwyc5U6oe",
              packageId:
                "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
              marketplaceId:
                "0x80d53635659d5d2906e902dffafd82b5b560de23e5c1e0be273ad36c0b8aa607",
              name: "Suinova: suinova",
              description: "suinova is the best builder",
              imageUrl:
                "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
              creatorAddress:
                "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
              collectionType:
                "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
              royaltyBagId: null,
              royaltyFee: "0",
              isActive: true,
              blockTimestamp: "1744615968058",
              txDigest: "5oa6Q6Cjtw8ZvNx6rFpKvcgZgYZz21M3buv6sG8L96eU",
              createdAt: "2025-04-16T23:05:53.950Z",
              updatedAt: "2025-04-18T20:02:38.259Z"
            },
            listingStatus: "NOT_LISTED",
            listingPrice: null,
            marketplaceId: null,
            sellerAddress: null,
            txDigest: null,
            listingBlockTimestamp: null,
            blockTimestamp: "1744617848647",
            fields: null,
            createdAt: "2025-04-16T23:05:54.822Z",
            updatedAt: "2025-04-21T17:00:12.079Z"
          }
        ]
      },
      {
        path: "collectionDetails",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          id: "19",
          projectId: "eiXrot4eWKiDSas6Lbmq43",
          packageId:
            "0x6e54963044294d71aff1168798821a36f53d6e1d91c9f973884a65e791499a9d",
          marketplaceId:
            "0x39aa56f41a0afe180b63c766caf45d1832ba7234667dca1471ef00645e5c3b99",
          name: "Suinova: suinova",
          description: "suinova is the best builder",
          imageUrl:
            "https://ika.rhei.finance/images/f0765912e0ec4f3306f83c80f301ffb45af2b310925a037340634491dae3c5b8.webp",
          creatorAddress:
            "0x7c484896d088f2eb3012cac48de62fd4ec02c54540cbb1cd5e312e02216d055a",
          collectionType:
            "0x0ac6cc60cb8842a8a8748569c372521191685c968db701f102b7337280fe5ef2::nft::NFT",
          royaltyBagId: null,
          royaltyFee: "0",
          isActive: true,
          blockTimestamp: "1744615968058",
          txDigest: "qPYtYeuteMGzpUmeGYFfA5psxLurKJvSjXpe4efDFJj",
          createdAt: "2025-04-16T23:09:37.461Z",
          updatedAt: "2025-04-18T20:02:43.634Z"
        })
      },
      {
        path: "buyNftModal[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "hoverredNft",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "openModal",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "unlistModal[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "activities",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            name: "Distant Galaxy",
            type: "Listed",
            price: 36.99,
            time: "Apr 21, 2024 10:00 PM",
            extraInfo: "90 Hug \u00d7 22 Hug"
          },
          {
            name: "Distant Galaxy",
            type: "Delisted",
            price: 36.99,
            time: "Apr 21, 2024 10:00 PM"
          },
          {
            name: "Distant Galaxy",
            type: "Sold",
            price: 36.99,
            time: "Apr 21, 2024 10:00 PM"
          },
          {
            name: "Distant Galaxy",
            type: "Purchased",
            price: 36.99,
            time: "Apr 21, 2024 10:00 PM"
          },
          {
            name: "Distant Galaxy",
            type: "Listed",
            price: 36.99,
            time: "Apr 21, 2024 10:00 PM"
          },
          {
            name: "Distant Galaxy",
            type: "Listed",
            price: 36.99,
            time: "Apr 21, 2024 10:00 PM"
          }
        ]
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantswy4R3RlEmIpX()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_css.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__jpVs)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__tJ7Ql)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__uVose)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__uvjN6)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  height={"80px"}
                  loading={"lazy"}
                  src={(() => {
                    try {
                      return $state.collectionDetails.imageUrl;
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  width={"80px"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2CgBf
                  )}
                >
                  {""}
                </div>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__uo4Sv)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___9ZZ1D)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__x4Cw
                    )}
                  >
                    {"Floor Price"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__f7SA8
                    )}
                  >
                    {"20 SUI"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox___9MFo)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__q93Nx
                    )}
                  >
                    {"Total Volume"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9ZUa
                    )}
                  >
                    {"10k SUI"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__rwGja)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xuWvX
                    )}
                  >
                    {"Items"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nLbkV
                    )}
                  >
                    {"100"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__svcuH)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sBLfu
                    )}
                  >
                    {"Owners"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__shxQr
                    )}
                  >
                    {"200"}
                  </div>
                </div>
              </Stack__>
            </Stack__>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__wwcP3)}>
            <AntdTabs
              data-plasmic-name={"tabs"}
              data-plasmic-override={overrides.tabs}
              activeKey={generateStateValueProp($state, ["tabs", "activeKey"])}
              animateTabBar={true}
              animateTabContent={false}
              animated={true}
              centered={false}
              className={classNames("__wab_instance", sty.tabs)}
              defaultActiveKey={"1"}
              destroyInactiveTabPane={false}
              items={
                <React.Fragment>
                  <AntdTabItem
                    className={classNames("__wab_instance", sty.tabItem__c0Ku8)}
                    key={"1"}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bVufE
                        )}
                      >
                        {"Items"}
                      </div>
                    }
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dCs0N)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xnMyp
                        )}
                      >
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button__vUq2V
                          )}
                          onClick={async () => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return !$state.openFilter;
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ik3Fu
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__pRnyB
                              )}
                            >
                              <FilterFunnel02SvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ltIyr
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__dzwey
                                )}
                              >
                                {"Filter"}
                              </div>
                            </div>
                            {(
                              hasVariant(
                                globalVariants,
                                "screen",
                                "mobileSmall"
                              )
                                ? true
                                : (() => {
                                    try {
                                      return $state.openFilter;
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })()
                            ) ? (
                              <LeftAngleSvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___0FSg
                                )}
                                role={"img"}
                              />
                            ) : null}
                            {(() => {
                              try {
                                return !$state.openFilter;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <LeftAngleSvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__h9Grb
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </div>
                        </AntdButton>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__czxuc
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__hMHyi
                            )}
                          >
                            {(() => {
                              const child$Props = {
                                allowClear: true,
                                bordered: false,
                                className: classNames(
                                  "__wab_instance",
                                  sty.searchNftName
                                ),
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["searchNftName", "value"],
                                    Input_Helpers
                                  ).apply(null, eventArgs);
                                },
                                placeholder: "Search NFT Name",
                                value: generateStateValueProp($state, [
                                  "searchNftName",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "searchNftName.value"
                                  }
                                ],
                                [],
                                Input_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <Input
                                  data-plasmic-name={"searchNftName"}
                                  data-plasmic-override={
                                    overrides.searchNftName
                                  }
                                  {...child$Props}
                                />
                              );
                            })()}
                            <MagnifyingGlassSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__iPcMs
                              )}
                              role={"img"}
                            />
                          </div>
                          <AntdSelect
                            data-plasmic-name={"sortNftItems"}
                            data-plasmic-override={overrides.sortNftItems}
                            allowClear={true}
                            className={classNames(
                              "__wab_instance",
                              sty.sortNftItems
                            )}
                            defaultOpen={false}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_css.plasmic_tokens
                            )}
                            defaultValue={"priceLowHigh"}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "sortNftItems",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            optionClassName={classNames({
                              [sty["pcls_H-A-hDSh2sEn"]]: true
                            })}
                            options={(() => {
                              const __composite = [
                                { value: null, label: null, type: null },
                                { value: null, label: null, type: "option" },
                                { type: null, label: null, value: null },
                                { type: "option", label: null, value: null }
                              ];
                              __composite["0"]["value"] = "priceLowHigh";
                              __composite["0"]["label"] = "Price low-high";
                              __composite["0"]["type"] = "option";
                              __composite["1"]["value"] = "priceHighLow";
                              __composite["1"]["label"] = "Price high-low";
                              __composite["2"]["type"] = "option";
                              __composite["2"]["label"] = "Recently Listed";
                              __composite["2"]["value"] = "recentlyListed";
                              __composite["3"]["label"] = "Recently Sold";
                              __composite["3"]["value"] = "recentlySold";
                              return __composite;
                            })()}
                            placeholder={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__dbTh
                                )}
                              >
                                {"Select..."}
                              </div>
                            }
                            placeholderClassName={classNames({
                              [sty["pcls_UKSkHh3MWQnm"]]: true
                            })}
                            popupClassName={classNames({
                              [sty["pcls_bSTCWoBXNzFj"]]: true
                            })}
                            popupScopeClassName={sty["sortNftItems__popup"]}
                            triggerClassName={classNames({
                              [sty["pcls_zB1W6Xx2EMeZ"]]: true
                            })}
                            useChildren={false}
                            value={generateStateValueProp($state, [
                              "sortNftItems",
                              "value"
                            ])}
                          />
                        </Stack__>
                      </Stack__>
                      {(() => {
                        try {
                          return $state.nftList.length > 0;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__tob5J
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__fgUpL
                            )}
                          >
                            {(() => {
                              try {
                                return true;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__qhiRh
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__urVnk
                                  )}
                                >
                                  {"Price Range"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__uPk0N
                                  )}
                                >
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__rwx1F
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__oKgZ
                                      )}
                                    >
                                      <AntdInputNumber
                                        data-plasmic-name={"minPrice"}
                                        data-plasmic-override={
                                          overrides.minPrice
                                        }
                                        bordered={false}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.minPrice
                                        )}
                                        controls={true}
                                        min={0}
                                        onChange={async (...eventArgs: any) => {
                                          generateStateOnChangeProp($state, [
                                            "minPrice",
                                            "value"
                                          ]).apply(null, eventArgs);
                                        }}
                                        placeholder={"min"}
                                        type={"number"}
                                        value={generateStateValueProp($state, [
                                          "minPrice",
                                          "value"
                                        ])}
                                      />

                                      <PlasmicImg__
                                        alt={""}
                                        className={classNames(sty.img__fqpKm)}
                                        displayHeight={"auto"}
                                        displayMaxHeight={"none"}
                                        displayMaxWidth={"100%"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"auto"}
                                        loading={"lazy"}
                                        src={
                                          "https://suinova.var-meta.com/static/img/water-drop.png"
                                        }
                                        width={"13px"}
                                      />
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__j2DD
                                      )}
                                    >
                                      <AntdInputNumber
                                        data-plasmic-name={"maxPrice"}
                                        data-plasmic-override={
                                          overrides.maxPrice
                                        }
                                        bordered={false}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.maxPrice
                                        )}
                                        controls={true}
                                        min={0}
                                        onChange={async (...eventArgs: any) => {
                                          generateStateOnChangeProp($state, [
                                            "maxPrice",
                                            "value"
                                          ]).apply(null, eventArgs);
                                        }}
                                        placeholder={"max"}
                                        type={"number"}
                                        value={generateStateValueProp($state, [
                                          "maxPrice",
                                          "value"
                                        ])}
                                      />

                                      <PlasmicImg__
                                        alt={""}
                                        className={classNames(sty.img__cm1Pa)}
                                        displayHeight={"auto"}
                                        displayMaxHeight={"none"}
                                        displayMaxWidth={"100%"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"auto"}
                                        loading={"lazy"}
                                        src={
                                          "https://suinova.var-meta.com/static/img/water-drop.png"
                                        }
                                        width={"13px"}
                                      />
                                    </div>
                                  </Stack__>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__syKs
                                  )}
                                >
                                  <Divider
                                    data-plasmic-name={"chakraUiDivider"}
                                    data-plasmic-override={
                                      overrides.chakraUiDivider
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.chakraUiDivider
                                    )}
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__lKbY
                                  )}
                                >
                                  {"Traits"}
                                </div>
                                <Menu
                                  data-plasmic-name={"traitsMenu"}
                                  data-plasmic-override={overrides.traitsMenu}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.traitsMenu
                                  )}
                                  mode={"inline"}
                                  onOpenChange={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "traitsMenu",
                                      "openKeys"
                                    ]).apply(null, eventArgs);
                                  }}
                                  openKeys={generateStateValueProp($state, [
                                    "traitsMenu",
                                    "openKeys"
                                  ])}
                                >
                                  <SubMenu
                                    className={classNames(
                                      "__wab_instance",
                                      sty.antdSubMenu__xF76
                                    )}
                                    key={"background5"}
                                    title={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__omdx
                                        )}
                                      >
                                        {"Background 5"}
                                      </div>
                                    }
                                  >
                                    <MenuItem
                                      className={classNames(
                                        "__wab_instance",
                                        sty.antdMenuItem___6VOpf
                                      )}
                                      key={"searchTraitBox"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox___7FirJ
                                        )}
                                      >
                                        {(() => {
                                          const child$Props = {
                                            allowClear: true,
                                            bordered: false,
                                            className: classNames(
                                              "__wab_instance",
                                              sty.searchBackground
                                            ),
                                            onChange: async (
                                              ...eventArgs: any
                                            ) => {
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "value",
                                                ["searchBackground", "value"],
                                                Input_Helpers
                                              ).apply(null, eventArgs);
                                            },
                                            placeholder: "Search",
                                            value: generateStateValueProp(
                                              $state,
                                              ["searchBackground", "value"]
                                            )
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "value",
                                                plasmicStateName:
                                                  "searchBackground.value"
                                              }
                                            ],
                                            [],
                                            Input_Helpers ?? {},
                                            child$Props
                                          );

                                          return (
                                            <Input
                                              data-plasmic-name={
                                                "searchBackground"
                                              }
                                              data-plasmic-override={
                                                overrides.searchBackground
                                              }
                                              {...child$Props}
                                            />
                                          );
                                        })()}
                                        <MagnifyingGlassSvgIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__giRwk
                                          )}
                                          role={"img"}
                                        />
                                      </div>
                                    </MenuItem>
                                    <MenuItem
                                      className={classNames(
                                        "__wab_instance",
                                        sty.antdMenuItem__fc7Fj
                                      )}
                                      key={"background1"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__yFqta
                                        )}
                                      >
                                        {(() => {
                                          const child$Props = {
                                            checked: generateStateValueProp(
                                              $state,
                                              ["antdCheckbox7", "value"]
                                            ),
                                            className: classNames(
                                              "__wab_instance",
                                              sty.antdCheckbox7
                                            ),
                                            onChange: async (
                                              ...eventArgs: any
                                            ) => {
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "value",
                                                ["antdCheckbox7", "value"],
                                                Checkbox_Helpers
                                              ).apply(null, eventArgs);
                                            }
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "value",
                                                plasmicStateName:
                                                  "antdCheckbox7.value"
                                              }
                                            ],
                                            [],
                                            Checkbox_Helpers ?? {},
                                            child$Props
                                          );

                                          return (
                                            <Checkbox
                                              data-plasmic-name={
                                                "antdCheckbox7"
                                              }
                                              data-plasmic-override={
                                                overrides.antdCheckbox7
                                              }
                                              {...child$Props}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__tlCo2
                                                )}
                                              >
                                                {"Blue"}
                                              </div>
                                            </Checkbox>
                                          );
                                        })()}
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___96HG7
                                          )}
                                        >
                                          {"20"}
                                        </div>
                                      </div>
                                    </MenuItem>
                                    <MenuItem
                                      className={classNames(
                                        "__wab_instance",
                                        sty.antdMenuItem___5M1QI
                                      )}
                                      key={"background2"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__ySbqi
                                        )}
                                      >
                                        {(() => {
                                          const child$Props = {
                                            checked: generateStateValueProp(
                                              $state,
                                              ["antdCheckbox6", "value"]
                                            ),
                                            className: classNames(
                                              "__wab_instance",
                                              sty.antdCheckbox6
                                            ),
                                            onChange: async (
                                              ...eventArgs: any
                                            ) => {
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "value",
                                                ["antdCheckbox6", "value"],
                                                Checkbox_Helpers
                                              ).apply(null, eventArgs);
                                            }
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "value",
                                                plasmicStateName:
                                                  "antdCheckbox6.value"
                                              }
                                            ],
                                            [],
                                            Checkbox_Helpers ?? {},
                                            child$Props
                                          );

                                          return (
                                            <Checkbox
                                              data-plasmic-name={
                                                "antdCheckbox6"
                                              }
                                              data-plasmic-override={
                                                overrides.antdCheckbox6
                                              }
                                              {...child$Props}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__xo1Gk
                                                )}
                                              >
                                                {"Gray"}
                                              </div>
                                            </Checkbox>
                                          );
                                        })()}
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__bgKTv
                                          )}
                                        >
                                          {"20"}
                                        </div>
                                      </div>
                                    </MenuItem>
                                    <MenuItem
                                      className={classNames(
                                        "__wab_instance",
                                        sty.antdMenuItem__zSmiZ
                                      )}
                                      key={"background3"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__jgnM
                                        )}
                                      >
                                        {(() => {
                                          const child$Props = {
                                            checked: generateStateValueProp(
                                              $state,
                                              ["antdCheckbox3", "value"]
                                            ),
                                            className: classNames(
                                              "__wab_instance",
                                              sty.antdCheckbox3
                                            ),
                                            onChange: async (
                                              ...eventArgs: any
                                            ) => {
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "value",
                                                ["antdCheckbox3", "value"],
                                                Checkbox_Helpers
                                              ).apply(null, eventArgs);
                                            }
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "value",
                                                plasmicStateName:
                                                  "antdCheckbox3.value"
                                              }
                                            ],
                                            [],
                                            Checkbox_Helpers ?? {},
                                            child$Props
                                          );

                                          return (
                                            <Checkbox
                                              data-plasmic-name={
                                                "antdCheckbox3"
                                              }
                                              data-plasmic-override={
                                                overrides.antdCheckbox3
                                              }
                                              {...child$Props}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text___2AQJu
                                                )}
                                              >
                                                {"Orange"}
                                              </div>
                                            </Checkbox>
                                          );
                                        })()}
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___6EhKl
                                          )}
                                        >
                                          {"20"}
                                        </div>
                                      </div>
                                    </MenuItem>
                                    <MenuItem
                                      className={classNames(
                                        "__wab_instance",
                                        sty.antdMenuItem__zu9Gq
                                      )}
                                      key={"background4"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__nEpmF
                                        )}
                                      >
                                        {(() => {
                                          const child$Props = {
                                            checked: generateStateValueProp(
                                              $state,
                                              ["antdCheckbox4", "value"]
                                            ),
                                            className: classNames(
                                              "__wab_instance",
                                              sty.antdCheckbox4
                                            ),
                                            onChange: async (
                                              ...eventArgs: any
                                            ) => {
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "value",
                                                ["antdCheckbox4", "value"],
                                                Checkbox_Helpers
                                              ).apply(null, eventArgs);
                                            }
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "value",
                                                plasmicStateName:
                                                  "antdCheckbox4.value"
                                              }
                                            ],
                                            [],
                                            Checkbox_Helpers ?? {},
                                            child$Props
                                          );

                                          return (
                                            <Checkbox
                                              data-plasmic-name={
                                                "antdCheckbox4"
                                              }
                                              data-plasmic-override={
                                                overrides.antdCheckbox4
                                              }
                                              {...child$Props}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__hi3Xr
                                                )}
                                              >
                                                {"Purple"}
                                              </div>
                                            </Checkbox>
                                          );
                                        })()}
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__zxQeF
                                          )}
                                        >
                                          {"20"}
                                        </div>
                                      </div>
                                    </MenuItem>
                                    <MenuItem
                                      className={classNames(
                                        "__wab_instance",
                                        sty.antdMenuItem__zPbaC
                                      )}
                                      key={"background5"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__idZ1Z
                                        )}
                                      >
                                        {(() => {
                                          const child$Props = {
                                            checked: generateStateValueProp(
                                              $state,
                                              ["antdCheckbox5", "value"]
                                            ),
                                            className: classNames(
                                              "__wab_instance",
                                              sty.antdCheckbox5
                                            ),
                                            onChange: async (
                                              ...eventArgs: any
                                            ) => {
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "value",
                                                ["antdCheckbox5", "value"],
                                                Checkbox_Helpers
                                              ).apply(null, eventArgs);
                                            }
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "value",
                                                plasmicStateName:
                                                  "antdCheckbox5.value"
                                              }
                                            ],
                                            [],
                                            Checkbox_Helpers ?? {},
                                            child$Props
                                          );

                                          return (
                                            <Checkbox
                                              data-plasmic-name={
                                                "antdCheckbox5"
                                              }
                                              data-plasmic-override={
                                                overrides.antdCheckbox5
                                              }
                                              {...child$Props}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__wSdkm
                                                )}
                                              >
                                                {"Black"}
                                              </div>
                                            </Checkbox>
                                          );
                                        })()}
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__enTwj
                                          )}
                                        >
                                          {"20"}
                                        </div>
                                      </div>
                                    </MenuItem>
                                  </SubMenu>
                                  <SubMenu
                                    className={classNames(
                                      "__wab_instance",
                                      sty.antdSubMenu__c3NjP
                                    )}
                                    key={"helmetGlassType5"}
                                    title={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__btYct
                                        )}
                                      >
                                        {"Helmet Glass Type 5"}
                                      </div>
                                    }
                                  >
                                    <MenuItem
                                      className={classNames(
                                        "__wab_instance",
                                        sty.antdMenuItem__j3Mq
                                      )}
                                      key={"subMenuItemKey1"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___3BPe
                                        )}
                                      >
                                        {"Sub-menu item 1"}
                                      </div>
                                    </MenuItem>
                                    <MenuItem
                                      className={classNames(
                                        "__wab_instance",
                                        sty.antdMenuItem__lMs51
                                      )}
                                      key={"subMenuItemKey2"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__dbClk
                                        )}
                                      >
                                        {"Sub-menu item 2"}
                                      </div>
                                    </MenuItem>
                                  </SubMenu>
                                  <SubMenu
                                    className={classNames(
                                      "__wab_instance",
                                      sty.antdSubMenu__pQkJ9
                                    )}
                                    key={"suitColor5"}
                                    title={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__lRtWh
                                        )}
                                      >
                                        {"Suit Color 5"}
                                      </div>
                                    }
                                  >
                                    <MenuItem
                                      className={classNames(
                                        "__wab_instance",
                                        sty.antdMenuItem__pxmAy
                                      )}
                                      key={"subMenuItemKey1"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__yXckl
                                        )}
                                      >
                                        {"Sub-menu item 1"}
                                      </div>
                                    </MenuItem>
                                    <MenuItem
                                      className={classNames(
                                        "__wab_instance",
                                        sty.antdMenuItem__uKUyJ
                                      )}
                                      key={"subMenuItemKey2"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__vSdJ
                                        )}
                                      >
                                        {"Sub-menu item 2"}
                                      </div>
                                    </MenuItem>
                                  </SubMenu>
                                  <SubMenu
                                    className={classNames(
                                      "__wab_instance",
                                      sty.antdSubMenu__tnjWi
                                    )}
                                    key={"reflection5"}
                                    title={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__rYwwm
                                        )}
                                      >
                                        {"Reflection 5"}
                                      </div>
                                    }
                                  >
                                    <MenuItem
                                      className={classNames(
                                        "__wab_instance",
                                        sty.antdMenuItem__ckJft
                                      )}
                                      key={"subMenuItemKey1"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__d1YQi
                                        )}
                                      >
                                        {"Sub-menu item 1"}
                                      </div>
                                    </MenuItem>
                                    <MenuItem
                                      className={classNames(
                                        "__wab_instance",
                                        sty.antdMenuItem__pWsb7
                                      )}
                                      key={"subMenuItemKey2"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__i5Q5G
                                        )}
                                      >
                                        {"Sub-menu item 2"}
                                      </div>
                                    </MenuItem>
                                  </SubMenu>
                                  <SubMenu
                                    className={classNames(
                                      "__wab_instance",
                                      sty.antdSubMenu__oMa0Z
                                    )}
                                    key={"character5"}
                                    title={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__emChP
                                        )}
                                      >
                                        {"Character 5"}
                                      </div>
                                    }
                                  >
                                    <MenuItem
                                      className={classNames(
                                        "__wab_instance",
                                        sty.antdMenuItem__l6ZAp
                                      )}
                                      key={"subMenuItemKey1"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__sK43R
                                        )}
                                      >
                                        {"Sub-menu item 1"}
                                      </div>
                                    </MenuItem>
                                    <MenuItem
                                      className={classNames(
                                        "__wab_instance",
                                        sty.antdMenuItem__sa4EO
                                      )}
                                      key={"subMenuItemKey2"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__jiQrP
                                        )}
                                      >
                                        {"Sub-menu item 2"}
                                      </div>
                                    </MenuItem>
                                  </SubMenu>
                                </Menu>
                              </div>
                            ) : null}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__k0AcQ
                            )}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $state.nftList;
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__mlCfd
                                  )}
                                  key={currentIndex}
                                  onMouseLeave={async event => {
                                    const $steps = {};

                                    $steps["updateHoverredNft"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["hoverredNft"]
                                            },
                                            operation: 0,
                                            value: ""
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateHoverredNft"] != null &&
                                      typeof $steps["updateHoverredNft"] ===
                                        "object" &&
                                      typeof $steps["updateHoverredNft"]
                                        .then === "function"
                                    ) {
                                      $steps["updateHoverredNft"] =
                                        await $steps["updateHoverredNft"];
                                    }
                                  }}
                                  onMouseOver={async event => {
                                    const $steps = {};

                                    $steps["updateHoverredNft"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["hoverredNft"]
                                            },
                                            operation: 0,
                                            value: currentItem.nftId
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateHoverredNft"] != null &&
                                      typeof $steps["updateHoverredNft"] ===
                                        "object" &&
                                      typeof $steps["updateHoverredNft"]
                                        .then === "function"
                                    ) {
                                      $steps["updateHoverredNft"] =
                                        await $steps["updateHoverredNft"];
                                    }
                                  }}
                                >
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__c1Vms)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"200px"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"200px"}
                                    displayMinWidth={"0"}
                                    displayWidth={"auto"}
                                    loading={"lazy"}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["goToNftDetails"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              destination: `/nft-details/${(() => {
                                                try {
                                                  return currentItem.nftId;
                                                } catch (e) {
                                                  if (e instanceof TypeError) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}`
                                            };
                                            return (({ destination }) => {
                                              if (
                                                typeof destination ===
                                                  "string" &&
                                                destination.startsWith("#")
                                              ) {
                                                document
                                                  .getElementById(
                                                    destination.substr(1)
                                                  )
                                                  .scrollIntoView({
                                                    behavior: "smooth"
                                                  });
                                              } else {
                                                location.assign(destination);
                                              }
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["goToNftDetails"] != null &&
                                        typeof $steps["goToNftDetails"] ===
                                          "object" &&
                                        typeof $steps["goToNftDetails"].then ===
                                          "function"
                                      ) {
                                        $steps["goToNftDetails"] = await $steps[
                                          "goToNftDetails"
                                        ];
                                      }
                                    }}
                                    src={(() => {
                                      try {
                                        return currentItem.imageUrl;
                                      } catch (e) {
                                        if (e instanceof TypeError) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__hwh6G
                                    )}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["goToNftDetails"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              destination: `/nft-details/${(() => {
                                                try {
                                                  return currentItem.nftId;
                                                } catch (e) {
                                                  if (e instanceof TypeError) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}`
                                            };
                                            return (({ destination }) => {
                                              if (
                                                typeof destination ===
                                                  "string" &&
                                                destination.startsWith("#")
                                              ) {
                                                document
                                                  .getElementById(
                                                    destination.substr(1)
                                                  )
                                                  .scrollIntoView({
                                                    behavior: "smooth"
                                                  });
                                              } else {
                                                location.assign(destination);
                                              }
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["goToNftDetails"] != null &&
                                        typeof $steps["goToNftDetails"] ===
                                          "object" &&
                                        typeof $steps["goToNftDetails"].then ===
                                          "function"
                                      ) {
                                        $steps["goToNftDetails"] = await $steps[
                                          "goToNftDetails"
                                        ];
                                      }
                                    }}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.name;
                                        } catch (e) {
                                          if (e instanceof TypeError) {
                                            return "Magic Astronaut #001 ";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__hcJ8
                                    )}
                                  >
                                    {"5.67 SUI"}
                                  </div>
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.buyNftModal
                                      ),
                                      closeButtonClassName: classNames({
                                        [sty["pcls_j3EojcxyrdRV"]]: true
                                      }),
                                      defaultStylesClassName: classNames(
                                        projectcss.root_reset,
                                        projectcss.plasmic_default_styles,
                                        projectcss.plasmic_mixins,
                                        projectcss.plasmic_tokens,
                                        plasmic_antd_5_css.plasmic_tokens
                                      ),
                                      hideFooter: true,
                                      modalScopeClassName:
                                        sty["buyNftModal__modal"],
                                      onOpenChange: async (
                                        ...eventArgs: any
                                      ) => {
                                        generateStateOnChangeProp($state, [
                                          "buyNftModal",
                                          __plasmic_idx_0,
                                          "open"
                                        ]).apply(null, eventArgs);
                                      },
                                      open: generateStateValueProp($state, [
                                        "buyNftModal",
                                        __plasmic_idx_0,
                                        "open"
                                      ]),
                                      title: (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__nqgSb
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__jnMiq
                                            )}
                                          >
                                            {"Complete Checkout"}
                                          </div>
                                          <CloseSquareSvgIcon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__icpfi
                                            )}
                                            onClick={async event => {
                                              const $steps = {};

                                              $steps["updateOpenModal"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "openModal"
                                                        ]
                                                      },
                                                      operation: 1
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        undefined
                                                      );
                                                      return undefined;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["updateOpenModal"] !=
                                                  null &&
                                                typeof $steps[
                                                  "updateOpenModal"
                                                ] === "object" &&
                                                typeof $steps["updateOpenModal"]
                                                  .then === "function"
                                              ) {
                                                $steps["updateOpenModal"] =
                                                  await $steps[
                                                    "updateOpenModal"
                                                  ];
                                              }

                                              $steps["updateHoverredNft"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "hoverredNft"
                                                        ]
                                                      },
                                                      operation: 1
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        undefined
                                                      );
                                                      return undefined;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["updateHoverredNft"] !=
                                                  null &&
                                                typeof $steps[
                                                  "updateHoverredNft"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "updateHoverredNft"
                                                ].then === "function"
                                              ) {
                                                $steps["updateHoverredNft"] =
                                                  await $steps[
                                                    "updateHoverredNft"
                                                  ];
                                              }
                                            }}
                                            role={"img"}
                                          />
                                        </div>
                                      ),
                                      trigger: (() => {
                                        try {
                                          return (
                                            currentItem.ownerAddress !==
                                              $ctx.web3WalletData
                                                .walletAddress &&
                                            currentItem.nftId ===
                                              $state.hoverredNft
                                          );
                                        } catch (e) {
                                          if (e instanceof TypeError) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <AntdButton
                                          className={classNames(
                                            "__wab_instance",
                                            sty.button___1P4FJ
                                          )}
                                          onClick={async () => {
                                            const $steps = {};

                                            $steps["updateOpenModal"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "openModal"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: currentItem.nftId
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateOpenModal"] !=
                                                null &&
                                              typeof $steps[
                                                "updateOpenModal"
                                              ] === "object" &&
                                              typeof $steps["updateOpenModal"]
                                                .then === "function"
                                            ) {
                                              $steps["updateOpenModal"] =
                                                await $steps["updateOpenModal"];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___6D5KB
                                            )}
                                          >
                                            {"Buy Now"}
                                          </div>
                                        </AntdButton>
                                      ) : null
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "open",
                                          plasmicStateName: "buyNftModal[].open"
                                        }
                                      ],
                                      [__plasmic_idx_0],
                                      undefined ?? {},
                                      child$Props
                                    );
                                    initializePlasmicStates(
                                      $state,
                                      [
                                        {
                                          name: "buyNftModal[].open",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) =>
                                            (() => {
                                              try {
                                                return (
                                                  currentItem.nftId ===
                                                    $state.openModal &&
                                                  currentItem.ownerAddress !==
                                                    $ctx.web3WalletData
                                                      .walletAddress
                                                );
                                              } catch (e) {
                                                if (e instanceof TypeError) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                        }
                                      ],
                                      [__plasmic_idx_0]
                                    );
                                    return (
                                      <AntdModal
                                        data-plasmic-name={"buyNftModal"}
                                        data-plasmic-override={
                                          overrides.buyNftModal
                                        }
                                        {...child$Props}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__pceO
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__kf4DZ
                                            )}
                                          >
                                            <PlasmicImg__
                                              alt={""}
                                              className={classNames(
                                                sty.img__fJhk
                                              )}
                                              displayHeight={"200px"}
                                              displayMaxHeight={"200px"}
                                              displayMaxWidth={"200px"}
                                              displayMinHeight={"0"}
                                              displayMinWidth={"0"}
                                              displayWidth={"200px"}
                                              loading={"lazy"}
                                              src={(() => {
                                                try {
                                                  return currentItem.imageUrl;
                                                } catch (e) {
                                                  if (e instanceof TypeError) {
                                                    return "https://s3-alpha-sig.figma.com/img/95d7/4adf/5e22f84c9cd16dedd040bb5691acd5ec?Expires=1744588800&Key-Pair-Id=APKAQ4GOSFWCW27IBOMQ&Signature=uHENKcEYiJq-DfepkNB09dP5FApY4dukCujpDHhp~fLWkSH14wfiXZrX8NdNv459clpf204CzKiLYjieYPhgdFON7pdQh1qqjnc6zlkgkiLiWH-gBexqWTUCkINbqtUVbTM46VuoVTW8oluQEcUFitirclzMMvQsSn1IWqOK4efSp6931Q15GRpaX1gahRtuqYXp-c4eigf2oqSpepbJPHi42hKhqCeqa6g0UEzTPODmJjcp-oP-zEFA5~OIlHqjnTYMUpJfEciAwFFbksF69GAMVgYp~PEutgkpf-UQgUqVQfkbCzJeMFi2dm-umEpVSC7GHKSbU5TiECqUdkZbfg__";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            />

                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__ctgdK
                                              )}
                                            >
                                              {"Magic Astronaut # 070"}
                                            </div>
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__zVu3F
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text___0Yvkm
                                                )}
                                              >
                                                {"Price"}
                                              </div>
                                              <Stack__
                                                as={"div"}
                                                hasGap={true}
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__zSvWy
                                                )}
                                              >
                                                <PlasmicImg__
                                                  alt={""}
                                                  className={classNames(
                                                    sty.img__d7NLr
                                                  )}
                                                  displayHeight={"auto"}
                                                  displayMaxHeight={"none"}
                                                  displayMaxWidth={"100%"}
                                                  displayMinHeight={"0"}
                                                  displayMinWidth={"0"}
                                                  displayWidth={"auto"}
                                                  height={"16px"}
                                                  loading={"lazy"}
                                                  src={
                                                    "https://suinova.var-meta.com/static/img/water-drop.png"
                                                  }
                                                  width={"13px"}
                                                />

                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text___8Oi0Q
                                                  )}
                                                >
                                                  {"20"}
                                                </div>
                                              </Stack__>
                                            </div>
                                            <Stack__
                                              as={"div"}
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__wtfDz
                                              )}
                                            >
                                              <AntdButton
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button__c4Kx
                                                )}
                                                onClick={async () => {
                                                  const $steps = {};

                                                  $steps["updateOpenModal"] =
                                                    true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "openModal"
                                                              ]
                                                            },
                                                            operation: 1
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              undefined
                                                            );
                                                            return undefined;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps["updateOpenModal"] !=
                                                      null &&
                                                    typeof $steps[
                                                      "updateOpenModal"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "updateOpenModal"
                                                    ].then === "function"
                                                  ) {
                                                    $steps["updateOpenModal"] =
                                                      await $steps[
                                                        "updateOpenModal"
                                                      ];
                                                  }

                                                  $steps["updateHoverredNft"] =
                                                    true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "hoverredNft"
                                                              ]
                                                            },
                                                            operation: 1
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              undefined
                                                            );
                                                            return undefined;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps[
                                                      "updateHoverredNft"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "updateHoverredNft"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "updateHoverredNft"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "updateHoverredNft"
                                                    ] = await $steps[
                                                      "updateHoverredNft"
                                                    ];
                                                  }
                                                }}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__jplHi
                                                  )}
                                                >
                                                  {"Cancel"}
                                                </div>
                                              </AntdButton>
                                              <AntdButton
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button__nAiHv
                                                )}
                                                onClick={async () => {
                                                  const $steps = {};

                                                  $steps["updateOpenModal"] =
                                                    true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "openModal"
                                                              ]
                                                            },
                                                            operation: 1
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              undefined
                                                            );
                                                            return undefined;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps["updateOpenModal"] !=
                                                      null &&
                                                    typeof $steps[
                                                      "updateOpenModal"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "updateOpenModal"
                                                    ].then === "function"
                                                  ) {
                                                    $steps["updateOpenModal"] =
                                                      await $steps[
                                                        "updateOpenModal"
                                                      ];
                                                  }

                                                  $steps["updateHoverredNft"] =
                                                    true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "hoverredNft"
                                                              ]
                                                            },
                                                            operation: 1
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              undefined
                                                            );
                                                            return undefined;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps[
                                                      "updateHoverredNft"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "updateHoverredNft"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "updateHoverredNft"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "updateHoverredNft"
                                                    ] = await $steps[
                                                      "updateHoverredNft"
                                                    ];
                                                  }

                                                  $steps["invokeGlobalAction"] =
                                                    true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            args: [
                                                              "success",
                                                              "Buy NFT successfully",
                                                              undefined,
                                                              2
                                                            ]
                                                          };
                                                          return $globalActions[
                                                            "plasmic-antd5-config-provider.showNotification"
                                                          ]?.apply(null, [
                                                            ...actionArgs.args
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps[
                                                      "invokeGlobalAction"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "invokeGlobalAction"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "invokeGlobalAction"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "invokeGlobalAction"
                                                    ] = await $steps[
                                                      "invokeGlobalAction"
                                                    ];
                                                  }
                                                }}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__wzhBm
                                                  )}
                                                >
                                                  {"Checkout"}
                                                </div>
                                              </AntdButton>
                                            </Stack__>
                                          </div>
                                        </div>
                                      </AntdModal>
                                    );
                                  })()}
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.unlistModal
                                      ),
                                      closeButtonClassName: classNames({
                                        [sty["pcls_zYRWeFWDg7ND"]]: true
                                      }),
                                      defaultStylesClassName: classNames(
                                        projectcss.root_reset,
                                        projectcss.plasmic_default_styles,
                                        projectcss.plasmic_mixins,
                                        projectcss.plasmic_tokens,
                                        plasmic_antd_5_css.plasmic_tokens
                                      ),
                                      hideFooter: true,
                                      modalScopeClassName:
                                        sty["unlistModal__modal"],
                                      onOpenChange: async (
                                        ...eventArgs: any
                                      ) => {
                                        generateStateOnChangeProp($state, [
                                          "unlistModal",
                                          __plasmic_idx_0,
                                          "open"
                                        ]).apply(null, eventArgs);
                                      },
                                      open: generateStateValueProp($state, [
                                        "unlistModal",
                                        __plasmic_idx_0,
                                        "open"
                                      ]),
                                      title: (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox___3Q6FR
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__csrNx
                                            )}
                                          >
                                            {"Cancel Listing"}
                                          </div>
                                          <CloseSquareSvgIcon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__civxi
                                            )}
                                            onClick={async event => {
                                              const $steps = {};

                                              $steps["updateOpenModal"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "openModal"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: ""
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["updateOpenModal"] !=
                                                  null &&
                                                typeof $steps[
                                                  "updateOpenModal"
                                                ] === "object" &&
                                                typeof $steps["updateOpenModal"]
                                                  .then === "function"
                                              ) {
                                                $steps["updateOpenModal"] =
                                                  await $steps[
                                                    "updateOpenModal"
                                                  ];
                                              }

                                              $steps["updateHoverredNft"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "hoverredNft"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: ""
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["updateHoverredNft"] !=
                                                  null &&
                                                typeof $steps[
                                                  "updateHoverredNft"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "updateHoverredNft"
                                                ].then === "function"
                                              ) {
                                                $steps["updateHoverredNft"] =
                                                  await $steps[
                                                    "updateHoverredNft"
                                                  ];
                                              }
                                            }}
                                            role={"img"}
                                          />
                                        </div>
                                      ),
                                      trigger: (() => {
                                        try {
                                          return (
                                            currentItem.ownerAddress ===
                                              $ctx.web3WalletData
                                                .walletAddress &&
                                            currentItem.nftId ===
                                              $state.hoverredNft
                                          );
                                        } catch (e) {
                                          if (e instanceof TypeError) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <AntdButton
                                          className={classNames(
                                            "__wab_instance",
                                            sty.button__x7S2P
                                          )}
                                          onClick={async () => {
                                            const $steps = {};

                                            $steps["updateOpenModal"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "openModal"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: currentItem.nftId
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateOpenModal"] !=
                                                null &&
                                              typeof $steps[
                                                "updateOpenModal"
                                              ] === "object" &&
                                              typeof $steps["updateOpenModal"]
                                                .then === "function"
                                            ) {
                                              $steps["updateOpenModal"] =
                                                await $steps["updateOpenModal"];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__piDlT
                                            )}
                                          >
                                            {"Unlist Now"}
                                          </div>
                                        </AntdButton>
                                      ) : null
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "open",
                                          plasmicStateName: "unlistModal[].open"
                                        }
                                      ],
                                      [__plasmic_idx_0],
                                      undefined ?? {},
                                      child$Props
                                    );
                                    initializePlasmicStates(
                                      $state,
                                      [
                                        {
                                          name: "unlistModal[].open",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) =>
                                            (() => {
                                              try {
                                                return (
                                                  currentItem.nftId ===
                                                    $state.openModal &&
                                                  currentItem.ownerAddress ===
                                                    $ctx.web3WalletData
                                                      .walletAddress
                                                );
                                              } catch (e) {
                                                if (e instanceof TypeError) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                        }
                                      ],
                                      [__plasmic_idx_0]
                                    );
                                    return (
                                      <AntdModal
                                        data-plasmic-name={"unlistModal"}
                                        data-plasmic-override={
                                          overrides.unlistModal
                                        }
                                        {...child$Props}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__ri3K0
                                          )}
                                        >
                                          <PlasmicImg__
                                            alt={""}
                                            className={classNames(
                                              sty.img__yBqxV
                                            )}
                                            displayHeight={"auto"}
                                            displayMaxHeight={"200px"}
                                            displayMaxWidth={"200px"}
                                            displayMinHeight={"0"}
                                            displayMinWidth={"0"}
                                            displayWidth={"auto"}
                                            height={(() => {
                                              try {
                                                return undefined;
                                              } catch (e) {
                                                if (e instanceof TypeError) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}
                                            loading={"lazy"}
                                            src={(() => {
                                              try {
                                                return currentItem.imageUrl;
                                              } catch (e) {
                                                if (e instanceof TypeError) {
                                                  return "https://s3-alpha-sig.figma.com/img/95d7/4adf/5e22f84c9cd16dedd040bb5691acd5ec?Expires=1744588800&Key-Pair-Id=APKAQ4GOSFWCW27IBOMQ&Signature=uHENKcEYiJq-DfepkNB09dP5FApY4dukCujpDHhp~fLWkSH14wfiXZrX8NdNv459clpf204CzKiLYjieYPhgdFON7pdQh1qqjnc6zlkgkiLiWH-gBexqWTUCkINbqtUVbTM46VuoVTW8oluQEcUFitirclzMMvQsSn1IWqOK4efSp6931Q15GRpaX1gahRtuqYXp-c4eigf2oqSpepbJPHi42hKhqCeqa6g0UEzTPODmJjcp-oP-zEFA5~OIlHqjnTYMUpJfEciAwFFbksF69GAMVgYp~PEutgkpf-UQgUqVQfkbCzJeMFi2dm-umEpVSC7GHKSbU5TiECqUdkZbfg__";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          />

                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__toOj
                                            )}
                                          >
                                            {"Magic Astronaut #070"}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__tTk8R
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__xgxmM
                                              )}
                                            >
                                              {"Listing Price"}
                                            </div>
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__qNf68
                                              )}
                                            >
                                              <PlasmicImg__
                                                alt={""}
                                                className={classNames(
                                                  sty.img__cFyIl
                                                )}
                                                displayHeight={"auto"}
                                                displayMaxHeight={"none"}
                                                displayMaxWidth={"100%"}
                                                displayMinHeight={"0"}
                                                displayMinWidth={"0"}
                                                displayWidth={"auto"}
                                                height={"16px"}
                                                loading={"lazy"}
                                                src={
                                                  "https://suinova.var-meta.com/static/img/water-drop.png"
                                                }
                                                width={"13px"}
                                              />

                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__igdG2
                                                )}
                                              >
                                                {"20"}
                                              </div>
                                            </div>
                                          </div>
                                          <Stack__
                                            as={"div"}
                                            hasGap={true}
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__rRgLw
                                            )}
                                          >
                                            <AntdButton
                                              className={classNames(
                                                "__wab_instance",
                                                sty.button__qc4Jw
                                              )}
                                              onClick={async () => {
                                                const $steps = {};

                                                $steps["updateOpenModal"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        variable: {
                                                          objRoot: $state,
                                                          variablePath: [
                                                            "openModal"
                                                          ]
                                                        },
                                                        operation: 0,
                                                        value: ""
                                                      };
                                                      return (({
                                                        variable,
                                                        value,
                                                        startIndex,
                                                        deleteCount
                                                      }) => {
                                                        if (!variable) {
                                                          return;
                                                        }
                                                        const {
                                                          objRoot,
                                                          variablePath
                                                        } = variable;

                                                        $stateSet(
                                                          objRoot,
                                                          variablePath,
                                                          value
                                                        );
                                                        return value;
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["updateOpenModal"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "updateOpenModal"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateOpenModal"
                                                  ].then === "function"
                                                ) {
                                                  $steps["updateOpenModal"] =
                                                    await $steps[
                                                      "updateOpenModal"
                                                    ];
                                                }

                                                $steps["updateHoverredNft"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "hoverredNft"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value: ""
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps["updateHoverredNft"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "updateHoverredNft"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateHoverredNft"
                                                  ].then === "function"
                                                ) {
                                                  $steps["updateHoverredNft"] =
                                                    await $steps[
                                                      "updateHoverredNft"
                                                    ];
                                                }
                                              }}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__fqd5S
                                                )}
                                              >
                                                {"Cancel"}
                                              </div>
                                            </AntdButton>
                                            <AntdButton
                                              className={classNames(
                                                "__wab_instance",
                                                sty.button___7Z3VN
                                              )}
                                              onClick={async () => {
                                                const $steps = {};

                                                $steps["updateOpenModal"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        variable: {
                                                          objRoot: $state,
                                                          variablePath: [
                                                            "openModal"
                                                          ]
                                                        },
                                                        operation: 0,
                                                        value: ""
                                                      };
                                                      return (({
                                                        variable,
                                                        value,
                                                        startIndex,
                                                        deleteCount
                                                      }) => {
                                                        if (!variable) {
                                                          return;
                                                        }
                                                        const {
                                                          objRoot,
                                                          variablePath
                                                        } = variable;

                                                        $stateSet(
                                                          objRoot,
                                                          variablePath,
                                                          value
                                                        );
                                                        return value;
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["updateOpenModal"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "updateOpenModal"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateOpenModal"
                                                  ].then === "function"
                                                ) {
                                                  $steps["updateOpenModal"] =
                                                    await $steps[
                                                      "updateOpenModal"
                                                    ];
                                                }

                                                $steps["updateHoverredNft"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "hoverredNft"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value: ""
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps["updateHoverredNft"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "updateHoverredNft"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateHoverredNft"
                                                  ].then === "function"
                                                ) {
                                                  $steps["updateHoverredNft"] =
                                                    await $steps[
                                                      "updateHoverredNft"
                                                    ];
                                                }

                                                $steps["invokeGlobalAction"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          args: [
                                                            "success",
                                                            "Cancel listing successfully",
                                                            undefined,
                                                            2
                                                          ]
                                                        };
                                                        return $globalActions[
                                                          "plasmic-antd5-config-provider.showNotification"
                                                        ]?.apply(null, [
                                                          ...actionArgs.args
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps[
                                                    "invokeGlobalAction"
                                                  ] != null &&
                                                  typeof $steps[
                                                    "invokeGlobalAction"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "invokeGlobalAction"
                                                  ].then === "function"
                                                ) {
                                                  $steps["invokeGlobalAction"] =
                                                    await $steps[
                                                      "invokeGlobalAction"
                                                    ];
                                                }
                                              }}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__fvyI4
                                                )}
                                              >
                                                {"Cancel Listing"}
                                              </div>
                                            </AntdButton>
                                          </Stack__>
                                        </div>
                                      </AntdModal>
                                    );
                                  })()}
                                </div>
                              );
                            })}
                          </div>
                        </Stack__>
                      ) : null}
                    </div>
                    {(() => {
                      try {
                        return $state.nftList.length === 0;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rmjrw
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___8PJl7
                          )}
                        >
                          {"No NFTs Found"}
                        </div>
                      </div>
                    ) : null}
                  </AntdTabItem>
                  <AntdTabItem
                    className={classNames("__wab_instance", sty.tabItem__tnYUx)}
                    key={"2"}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__li9BY
                        )}
                      >
                        {"Activity"}
                      </div>
                    }
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__c3ErB)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wGoG
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__p2FJr
                          )}
                        >
                          {(() => {
                            const child$Props = {
                              allowClear: true,
                              bordered: false,
                              className: classNames(
                                "__wab_instance",
                                sty.searchActivityNftName
                              ),
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["searchActivityNftName", "value"],
                                  Input_Helpers
                                ).apply(null, eventArgs);
                              },
                              placeholder: "Search NFT Name",
                              value: generateStateValueProp($state, [
                                "searchActivityNftName",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName:
                                    "searchActivityNftName.value"
                                }
                              ],
                              [],
                              Input_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <Input
                                data-plasmic-name={"searchActivityNftName"}
                                data-plasmic-override={
                                  overrides.searchActivityNftName
                                }
                                {...child$Props}
                              />
                            );
                          })()}
                          <MagnifyingGlassSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__sFa98
                            )}
                            role={"img"}
                          />
                        </div>
                        <AntdSelect
                          data-plasmic-name={"sortNftActivities"}
                          data-plasmic-override={overrides.sortNftActivities}
                          allowClear={true}
                          className={classNames(
                            "__wab_instance",
                            sty.sortNftActivities
                          )}
                          defaultOpen={false}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_css.plasmic_tokens
                          )}
                          defaultValue={"priceLowHigh"}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "sortNftActivities",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          optionClassName={classNames({
                            [sty["pcls_Nj7VW8sEl1JP"]]: true
                          })}
                          options={(() => {
                            const __composite = [
                              { value: null, label: null, type: null },
                              { value: null, label: null, type: "option" },
                              { type: null, label: null, value: null },
                              { type: "option", label: null, value: null }
                            ];
                            __composite["0"]["value"] = "priceLowHigh";
                            __composite["0"]["label"] = "Price low-high";
                            __composite["0"]["type"] = "option";
                            __composite["1"]["value"] = "priceHighLow";
                            __composite["1"]["label"] = "Price high-low";
                            __composite["2"]["type"] = "option";
                            __composite["2"]["label"] = "Recently Listed";
                            __composite["2"]["value"] = "recentlyListed";
                            __composite["3"]["label"] = "Recently Sold";
                            __composite["3"]["value"] = "recentlySold";
                            return __composite;
                          })()}
                          placeholder={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__uyNnM
                              )}
                            >
                              {"Select..."}
                            </div>
                          }
                          popupClassName={classNames({
                            [sty["pcls_7__JJQCGbZsc"]]: true
                          })}
                          popupScopeClassName={sty["sortNftActivities__popup"]}
                          triggerClassName={classNames({
                            [sty["pcls_s4J6pxsuXWHU"]]: true
                          })}
                          useChildren={false}
                          value={generateStateValueProp($state, [
                            "sortNftActivities",
                            "value"
                          ])}
                        />
                      </Stack__>
                      <TableContainer
                        data-plasmic-name={"chakraUiTableContainer"}
                        data-plasmic-override={overrides.chakraUiTableContainer}
                        className={classNames(
                          "__wab_instance",
                          sty.chakraUiTableContainer
                        )}
                      >
                        <Table
                          data-plasmic-name={"chakraUiTable"}
                          data-plasmic-override={overrides.chakraUiTable}
                          className={classNames(
                            "__wab_instance",
                            sty.chakraUiTable
                          )}
                          colorScheme={"gray"}
                          size={"md"}
                          variant={"simple"}
                        >
                          <Thead
                            data-plasmic-name={"chakraUiThead"}
                            data-plasmic-override={overrides.chakraUiThead}
                            className={classNames(
                              "__wab_instance",
                              sty.chakraUiThead
                            )}
                          >
                            <Tr
                              className={classNames(
                                "__wab_instance",
                                sty.chakraUiTr___0OjWz
                              )}
                            >
                              <Th
                                className={classNames(
                                  "__wab_instance",
                                  sty.chakraUiTh__bilAb
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__uFddD
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__atYv
                                    )}
                                  >
                                    {"#"}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__o1Jwz
                                    )}
                                  >
                                    {"NFTs Name"}
                                  </div>
                                </div>
                              </Th>
                              <Th
                                className={classNames(
                                  "__wab_instance",
                                  sty.chakraUiTh___7Qd0U
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__oReky
                                  )}
                                >
                                  {"Type"}
                                </div>
                              </Th>
                              <Th
                                className={classNames(
                                  "__wab_instance",
                                  sty.chakraUiTh__izruz
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__cvkCa
                                  )}
                                >
                                  {"Price"}
                                </div>
                              </Th>
                              <Th
                                className={classNames(
                                  "__wab_instance",
                                  sty.chakraUiTh__qb3K
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__errBz
                                  )}
                                >
                                  {"Time"}
                                </div>
                              </Th>
                            </Tr>
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              []
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <Tr
                                  className={classNames(
                                    "__wab_instance",
                                    sty.chakraUiTr__skvOt
                                  )}
                                  key={currentIndex}
                                >
                                  <Td
                                    className={classNames(
                                      "__wab_instance",
                                      sty.chakraUiTd__gaPkw
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__csVtH
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__oOcCy
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.name;
                                            } catch (e) {
                                              if (e instanceof TypeError) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  </Td>
                                  <Td
                                    className={classNames(
                                      "__wab_instance",
                                      sty.chakraUiTd__b0I6L
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__rbLu5
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__lxU1H
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.type;
                                            } catch (e) {
                                              if (e instanceof TypeError) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  </Td>
                                  <Td
                                    className={classNames(
                                      "__wab_instance",
                                      sty.chakraUiTd__dgLiz
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__boKvw
                                      )}
                                    >
                                      <DropIcon
                                        className={classNames(
                                          "__wab_instance",
                                          sty.dropIcon__gUtO3
                                        )}
                                      />

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__aqeJt
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.price;
                                            } catch (e) {
                                              if (e instanceof TypeError) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__pSjr
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return undefined;
                                          } catch (e) {
                                            if (e instanceof TypeError) {
                                              return "Table Cell";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </Td>
                                  <Td
                                    className={classNames(
                                      "__wab_instance",
                                      sty.chakraUiTd__nwbOg
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__t78Jm
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.time;
                                          } catch (e) {
                                            if (e instanceof TypeError) {
                                              return "Table Cell";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </Td>
                                </Tr>
                              );
                            })}
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $state.activities;
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <Tr
                                  className={classNames(
                                    "__wab_instance",
                                    sty.chakraUiTr__qK8Av
                                  )}
                                  key={currentIndex}
                                >
                                  <Td
                                    className={classNames(
                                      "__wab_instance",
                                      sty.chakraUiTd__lhaOl
                                    )}
                                    isNumeric={false}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__djwjq
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.name;
                                          } catch (e) {
                                            if (e instanceof TypeError) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </Td>
                                  <Td
                                    className={classNames(
                                      "__wab_instance",
                                      sty.chakraUiTd__gXd5X
                                    )}
                                    isNumeric={false}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__b0VtD
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.type;
                                          } catch (e) {
                                            if (e instanceof TypeError) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </Td>
                                  <Td
                                    className={classNames(
                                      "__wab_instance",
                                      sty.chakraUiTd___0Pu6B
                                    )}
                                    isNumeric={false}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__uwhW2
                                      )}
                                    >
                                      <DropIcon
                                        className={classNames(
                                          "__wab_instance",
                                          sty.dropIcon__jOq8V
                                        )}
                                      />

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__lxS7D
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.price;
                                            } catch (e) {
                                              if (e instanceof TypeError) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  </Td>
                                  <Td
                                    className={classNames(
                                      "__wab_instance",
                                      sty.chakraUiTd__xx83Y
                                    )}
                                    isNumeric={false}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__xOhYz
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.time;
                                          } catch (e) {
                                            if (e instanceof TypeError) {
                                              return "Table Cell";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </Td>
                                  {(() => {
                                    try {
                                      return $state.activities.length === 0;
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <Td
                                      className={classNames(
                                        "__wab_instance",
                                        sty.chakraUiTd__mrzkQ
                                      )}
                                      isNumeric={false}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__vUjmk
                                        )}
                                      >
                                        {"NO DATA"}
                                      </div>
                                    </Td>
                                  ) : null}
                                </Tr>
                              );
                            })}
                          </Thead>
                          <Tbody
                            data-plasmic-name={"chakraUiTbody"}
                            data-plasmic-override={overrides.chakraUiTbody}
                            className={classNames(
                              "__wab_instance",
                              sty.chakraUiTbody
                            )}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              []
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <Tr
                                  className={classNames(
                                    "__wab_instance",
                                    sty.chakraUiTr__zTpSb
                                  )}
                                  key={currentIndex}
                                >
                                  <Td
                                    className={classNames(
                                      "__wab_instance",
                                      sty.chakraUiTd__i5Vtl
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__kbt1
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__mlWBe
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.name;
                                            } catch (e) {
                                              if (e instanceof TypeError) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  </Td>
                                  <Td
                                    className={classNames(
                                      "__wab_instance",
                                      sty.chakraUiTd__lnYl7
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__oxOuc
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__z515R
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.type;
                                            } catch (e) {
                                              if (e instanceof TypeError) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  </Td>
                                  <Td
                                    className={classNames(
                                      "__wab_instance",
                                      sty.chakraUiTd__aZja9
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___9TfPx
                                      )}
                                    >
                                      <DropIcon
                                        className={classNames(
                                          "__wab_instance",
                                          sty.dropIcon__sLyBj
                                        )}
                                      />

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__mFgt
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.price;
                                            } catch (e) {
                                              if (e instanceof TypeError) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  </Td>
                                  <Td
                                    className={classNames(
                                      "__wab_instance",
                                      sty.chakraUiTd__zxy3O
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__iy8Hx
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__nqQSq
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.time;
                                            } catch (e) {
                                              if (e instanceof TypeError) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  </Td>
                                </Tr>
                              );
                            })}
                          </Tbody>
                        </Table>
                      </TableContainer>
                    </div>
                  </AntdTabItem>
                </React.Fragment>
              }
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["tabs", "activeKey"]).apply(
                  null,
                  eventArgs
                );
              }}
              sticky={false}
              tabBarBackground={"#FFF"}
              tabsDropdownScopeClassName={sty["tabs__tabsDropdown"]}
              tabsScopeClassName={sty["tabs__tabs"]}
              type={"line"}
            />
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "tabs",
    "searchNftName",
    "sortNftItems",
    "minPrice",
    "maxPrice",
    "chakraUiDivider",
    "traitsMenu",
    "searchBackground",
    "antdCheckbox7",
    "antdCheckbox6",
    "antdCheckbox3",
    "antdCheckbox4",
    "antdCheckbox5",
    "buyNftModal",
    "unlistModal",
    "searchActivityNftName",
    "sortNftActivities",
    "chakraUiTableContainer",
    "chakraUiTable",
    "chakraUiThead",
    "chakraUiTbody",
    "footer"
  ],
  header: ["header"],
  tabs: [
    "tabs",
    "searchNftName",
    "sortNftItems",
    "minPrice",
    "maxPrice",
    "chakraUiDivider",
    "traitsMenu",
    "searchBackground",
    "antdCheckbox7",
    "antdCheckbox6",
    "antdCheckbox3",
    "antdCheckbox4",
    "antdCheckbox5",
    "buyNftModal",
    "unlistModal",
    "searchActivityNftName",
    "sortNftActivities",
    "chakraUiTableContainer",
    "chakraUiTable",
    "chakraUiThead",
    "chakraUiTbody"
  ],
  searchNftName: ["searchNftName"],
  sortNftItems: ["sortNftItems"],
  minPrice: ["minPrice"],
  maxPrice: ["maxPrice"],
  chakraUiDivider: ["chakraUiDivider"],
  traitsMenu: [
    "traitsMenu",
    "searchBackground",
    "antdCheckbox7",
    "antdCheckbox6",
    "antdCheckbox3",
    "antdCheckbox4",
    "antdCheckbox5"
  ],
  searchBackground: ["searchBackground"],
  antdCheckbox7: ["antdCheckbox7"],
  antdCheckbox6: ["antdCheckbox6"],
  antdCheckbox3: ["antdCheckbox3"],
  antdCheckbox4: ["antdCheckbox4"],
  antdCheckbox5: ["antdCheckbox5"],
  buyNftModal: ["buyNftModal"],
  unlistModal: ["unlistModal"],
  searchActivityNftName: ["searchActivityNftName"],
  sortNftActivities: ["sortNftActivities"],
  chakraUiTableContainer: [
    "chakraUiTableContainer",
    "chakraUiTable",
    "chakraUiThead",
    "chakraUiTbody"
  ],
  chakraUiTable: ["chakraUiTable", "chakraUiThead", "chakraUiTbody"],
  chakraUiThead: ["chakraUiThead"],
  chakraUiTbody: ["chakraUiTbody"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  tabs: typeof AntdTabs;
  searchNftName: typeof Input;
  sortNftItems: typeof AntdSelect;
  minPrice: typeof AntdInputNumber;
  maxPrice: typeof AntdInputNumber;
  chakraUiDivider: typeof Divider;
  traitsMenu: typeof Menu;
  searchBackground: typeof Input;
  antdCheckbox7: typeof Checkbox;
  antdCheckbox6: typeof Checkbox;
  antdCheckbox3: typeof Checkbox;
  antdCheckbox4: typeof Checkbox;
  antdCheckbox5: typeof Checkbox;
  buyNftModal: typeof AntdModal;
  unlistModal: typeof AntdModal;
  searchActivityNftName: typeof Input;
  sortNftActivities: typeof AntdSelect;
  chakraUiTableContainer: typeof TableContainer;
  chakraUiTable: typeof Table;
  chakraUiThead: typeof Thead;
  chakraUiTbody: typeof Tbody;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicViewNftList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicViewNftList__VariantsArgs;
    args?: PlasmicViewNftList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicViewNftList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicViewNftList__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicViewNftList__ArgProps,
          internalVariantPropNames: PlasmicViewNftList__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicViewNftList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicViewNftList";
  } else {
    func.displayName = `PlasmicViewNftList.${nodeName}`;
  }
  return func;
}

export const PlasmicViewNftList = Object.assign(
  // Top-level PlasmicViewNftList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    tabs: makeNodeComponent("tabs"),
    searchNftName: makeNodeComponent("searchNftName"),
    sortNftItems: makeNodeComponent("sortNftItems"),
    minPrice: makeNodeComponent("minPrice"),
    maxPrice: makeNodeComponent("maxPrice"),
    chakraUiDivider: makeNodeComponent("chakraUiDivider"),
    traitsMenu: makeNodeComponent("traitsMenu"),
    searchBackground: makeNodeComponent("searchBackground"),
    antdCheckbox7: makeNodeComponent("antdCheckbox7"),
    antdCheckbox6: makeNodeComponent("antdCheckbox6"),
    antdCheckbox3: makeNodeComponent("antdCheckbox3"),
    antdCheckbox4: makeNodeComponent("antdCheckbox4"),
    antdCheckbox5: makeNodeComponent("antdCheckbox5"),
    buyNftModal: makeNodeComponent("buyNftModal"),
    unlistModal: makeNodeComponent("unlistModal"),
    searchActivityNftName: makeNodeComponent("searchActivityNftName"),
    sortNftActivities: makeNodeComponent("sortNftActivities"),
    chakraUiTableContainer: makeNodeComponent("chakraUiTableContainer"),
    chakraUiTable: makeNodeComponent("chakraUiTable"),
    chakraUiThead: makeNodeComponent("chakraUiThead"),
    chakraUiTbody: makeNodeComponent("chakraUiTbody"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicViewNftList
    internalVariantProps: PlasmicViewNftList__VariantProps,
    internalArgProps: PlasmicViewNftList__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicViewNftList;
/* prettier-ignore-end */
