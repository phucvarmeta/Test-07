// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5vAoK7BmKbFSGEzykGZNyw
// Component: AYohF2Sl2Q6W

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ConnectWalletButton } from "suinova-nft-builder/dist/index.js";
import { WalletIcon } from "suinova-nft-builder/dist/index.js";
import { CopyIcon } from "suinova-nft-builder/dist/index.js";
import { UserIcon } from "suinova-nft-builder/dist/index.js";
import { LogoutIcon } from "suinova-nft-builder/dist/index.js";
import { NFTCarouselItem } from "suinova-nft-builder/dist/index.js";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: 66MC2d9B7YecVEphuUMtqF/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5vAoK7BmKbFSGEzykGZNyw/projectcss
import sty from "./PlasmicTest.module.css"; // plasmic-import: AYohF2Sl2Q6W/css

createPlasmicElementProxy;

export type PlasmicTest__VariantMembers = {};
export type PlasmicTest__VariantsArgs = {};
type VariantPropType = keyof PlasmicTest__VariantsArgs;
export const PlasmicTest__VariantProps = new Array<VariantPropType>();

export type PlasmicTest__ArgsType = {};
type ArgPropType = keyof PlasmicTest__ArgsType;
export const PlasmicTest__ArgProps = new Array<ArgPropType>();

export type PlasmicTest__OverridesType = {
  root?: Flex__<"div">;
  connectWalletButton?: Flex__<typeof ConnectWalletButton>;
  walletIcon?: Flex__<typeof WalletIcon>;
  copyIcon?: Flex__<typeof CopyIcon>;
  userIcon?: Flex__<typeof UserIcon>;
  logoutIconIcon?: Flex__<typeof LogoutIcon>;
  nftCarouselItem?: Flex__<typeof NFTCarouselItem>;
};

export interface DefaultTestProps {
  className?: string;
}

const $$ = {};

function PlasmicTest__RenderFunc(props: {
  variants: PlasmicTest__VariantsArgs;
  args: PlasmicTest__ArgsType;
  overrides: PlasmicTest__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_css.plasmic_tokens,
            sty.root
          )}
        >
          <ConnectWalletButton
            data-plasmic-name={"connectWalletButton"}
            data-plasmic-override={overrides.connectWalletButton}
            className={classNames("__wab_instance", sty.connectWalletButton)}
            connectText={"Connect Wallet"}
            copyIcon={
              <CopyIcon
                data-plasmic-name={"copyIcon"}
                data-plasmic-override={overrides.copyIcon}
                className={
                  "" + " " + classNames("__wab_instance", sty.copyIcon)
                }
                iconColor={"#27273A"}
              />
            }
            icon={
              <WalletIcon
                data-plasmic-name={"walletIcon"}
                data-plasmic-override={overrides.walletIcon}
                className={
                  "" + " " + classNames("__wab_instance", sty.walletIcon)
                }
              />
            }
            logoutIcon={
              <LogoutIcon
                data-plasmic-name={"logoutIconIcon"}
                data-plasmic-override={overrides.logoutIconIcon}
                className={
                  "" + " " + classNames("__wab_instance", sty.logoutIconIcon)
                }
              />
            }
            userIcon={
              <UserIcon
                data-plasmic-name={"userIcon"}
                data-plasmic-override={overrides.userIcon}
                className={
                  "" + " " + classNames("__wab_instance", sty.userIcon)
                }
              />
            }
          />

          <NFTCarouselItem
            data-plasmic-name={"nftCarouselItem"}
            data-plasmic-override={overrides.nftCarouselItem}
            className={classNames("__wab_instance", sty.nftCarouselItem)}
            id={3208}
            image={"https://suinova.var-meta.com/static/img/astronaut.jpeg"}
            name={"NFT Astronaut"}
            price={"30 SUI"}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "connectWalletButton",
    "walletIcon",
    "copyIcon",
    "userIcon",
    "logoutIconIcon",
    "nftCarouselItem"
  ],
  connectWalletButton: [
    "connectWalletButton",
    "walletIcon",
    "copyIcon",
    "userIcon",
    "logoutIconIcon"
  ],
  walletIcon: ["walletIcon"],
  copyIcon: ["copyIcon"],
  userIcon: ["userIcon"],
  logoutIconIcon: ["logoutIconIcon"],
  nftCarouselItem: ["nftCarouselItem"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  connectWalletButton: typeof ConnectWalletButton;
  walletIcon: typeof WalletIcon;
  copyIcon: typeof CopyIcon;
  userIcon: typeof UserIcon;
  logoutIconIcon: typeof LogoutIcon;
  nftCarouselItem: typeof NFTCarouselItem;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTest__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTest__VariantsArgs;
    args?: PlasmicTest__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTest__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTest__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTest__ArgProps,
          internalVariantPropNames: PlasmicTest__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTest__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTest";
  } else {
    func.displayName = `PlasmicTest.${nodeName}`;
  }
  return func;
}

export const PlasmicTest = Object.assign(
  // Top-level PlasmicTest renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    connectWalletButton: makeNodeComponent("connectWalletButton"),
    walletIcon: makeNodeComponent("walletIcon"),
    copyIcon: makeNodeComponent("copyIcon"),
    userIcon: makeNodeComponent("userIcon"),
    logoutIconIcon: makeNodeComponent("logoutIconIcon"),
    nftCarouselItem: makeNodeComponent("nftCarouselItem"),

    // Metadata about props expected for PlasmicTest
    internalVariantProps: PlasmicTest__VariantProps,
    internalArgProps: PlasmicTest__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTest;
/* prettier-ignore-end */
